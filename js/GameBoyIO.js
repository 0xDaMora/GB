"use strict";var gameboy=null,gbRunInterval=null,settings=[!0,!0,!1,1,!0,!1,8,10,20,!1,!1,!1,!1,!0,[!0,!0,!0,!0]];function start(e,t){clearLastEmulation(),autoSave(),(gameboy=new GameBoyCore(e,t)).openMBC=openSRAM,gameboy.openRTC=openRTC,gameboy.start(),run()}function run(){if(GameBoyEmulatorInitialized()){if(GameBoyEmulatorPlaying())cout("The GameBoy core is already running.",1);else{gameboy.stopEmulator&=1,cout("Starting the iterator.",0);var e=new Date;gameboy.firstIteration=e.getTime(),gameboy.iterations=0,gbRunInterval=setInterval(function(){document.hidden||document.msHidden||document.mozHidden||document.webkitHidden||gameboy.run()},settings[6])}}else cout("GameBoy core cannot run while it has not been initialized.",1)}function pause(){GameBoyEmulatorInitialized()?GameBoyEmulatorPlaying()?(autoSave(),clearLastEmulation()):cout("GameBoy core has already been paused.",1):cout("GameBoy core cannot be paused while it has not been initialized.",1)}function clearLastEmulation(){GameBoyEmulatorInitialized()&&GameBoyEmulatorPlaying()?(clearInterval(gbRunInterval),gameboy.stopEmulator|=2,cout("The previous emulation has been cleared.",0)):cout("No previous emulation was found to be cleared.",0)}function save(){if(GameBoyEmulatorInitialized()){for(var e=0;null!=findValue("FREEZE_"+gameboy.name+"_"+e);)e++;saveState("FREEZE_"+gameboy.name+"_"+e)}else cout("GameBoy core cannot be saved while it has not been initialized.",1)}function saveSRAM(){if(GameBoyEmulatorInitialized()){if(gameboy.cBATT)try{var e=gameboy.saveSRAMState();e.length>0?(cout("Saving the SRAM...",0),null!=findValue("SRAM_"+gameboy.name)&&(cout("Deleting the old SRAM save due to outdated format.",0),deleteValue("SRAM_"+gameboy.name)),setValue("B64_SRAM_"+gameboy.name,arrayToBase64(e))):cout("SRAM could not be saved because it was empty.",1)}catch(t){cout('Could not save the current emulation state("'+t.message+'").',2)}else cout("Cannot save a game that does not have battery backed SRAM specified.",1);saveRTC()}else cout("GameBoy core cannot be saved while it has not been initialized.",1)}function saveRTC(){if(GameBoyEmulatorInitialized()){if(gameboy.cTIMER)try{cout("Saving the RTC...",0),setValue("RTC_"+gameboy.name,gameboy.saveRTCState())}catch(e){cout('Could not save the RTC of the current emulation state("'+e.message+'").',2)}}else cout("GameBoy core cannot be saved while it has not been initialized.",1)}function autoSave(){GameBoyEmulatorInitialized()&&(cout("Automatically saving the SRAM.",0),saveSRAM(),saveRTC())}function openSRAM(e){try{if(null!=findValue("B64_SRAM_"+e))return cout("Found a previous SRAM state (Will attempt to load).",0),base64ToArray(findValue("B64_SRAM_"+e));if(null!=findValue("SRAM_"+e))return cout("Found a previous SRAM state (Will attempt to load).",0),findValue("SRAM_"+e);cout("Could not find any previous SRAM copy for the current ROM.",0)}catch(t){cout("Could not open the  SRAM of the saved emulation state.",2)}return[]}function openRTC(e){try{if(null!=findValue("RTC_"+e))return cout("Found a previous RTC state (Will attempt to load).",0),findValue("RTC_"+e);cout("Could not find any previous RTC copy for the current ROM.",0)}catch(t){cout("Could not open the RTC data of the saved emulation state.",2)}return[]}function saveState(e){if(GameBoyEmulatorInitialized())try{setValue(e,gameboy.saveState()),cout("Saved the current state as: "+e,0)}catch(t){cout('Could not save the current emulation state("'+t.message+'").',2)}else cout("GameBoy core cannot be saved while it has not been initialized.",1)}function openState(e,t){try{if(null!=findValue(e))try{clearLastEmulation(),cout("Attempting to run a saved emulation state.",0),(gameboy=new GameBoyCore(t,"")).savedStateFileName=e,gameboy.returnFromState(findValue(e)),run()}catch(a){alert(a.message+" file: "+a.fileName+" line: "+a.lineNumber)}else cout("Could not find the save state "+e+'".',2)}catch(o){cout("Could not open the saved emulation state.",2)}}function import_save(e){if((e=decodeBlob(e))&&e.blobs){if(e.blobs.length>0)for(var t=0;t<e.blobs.length;++t)cout('Importing blob "'+e.blobs[t].blobID+'"',0),e.blobs[t].blobContent?"SRAM_"==e.blobs[t].blobID.substring(0,5)?setValue("B64_"+e.blobs[t].blobID,base64(e.blobs[t].blobContent)):setValue(e.blobs[t].blobID,JSON.parse(e.blobs[t].blobContent)):e.blobs[t].blobID?cout('Save file imported had blob "'+e.blobs[t].blobID+'" with no blob data interpretable.',2):cout("Blob chunk information missing completely.",2);else cout("Could not decode the imported file.",2)}else cout("Could not decode the imported file.",2)}function generateBlob(e,t){var a="EMULATOR_DATA",o="GameBoy",n=a.length+4+(1+o.length)+(1+e.length+(4+t.length));return a+=to_little_endian_dword(n),a+=to_byte(o.length),a+=o,a+=to_byte(e.length),a+=e,a+=to_little_endian_dword(t.length),a+=t}function generateMultiBlob(e){var t="GameBoy",a=18+t.length,o=to_byte(t.length);o+=t;for(var n="",i="",l=0;l<e.length;++l)n=e[l][0],i=e[l][1],o+=to_byte(n.length),o+=n,o+=to_little_endian_dword(i.length),o+=i,a+=1+n.length+4+i.length;return"EMULATOR_DATA"+to_little_endian_dword(a)+o}function decodeBlob(e){var t=e.length,a={};a.consoleID=null;var o=-1;if(a.blobs=[],t>17&&"EMULATOR_DATA"==e.substring(0,13)){var t=Math.min((255&e.charCodeAt(16))<<24|(255&e.charCodeAt(15))<<16|(255&e.charCodeAt(14))<<8|255&e.charCodeAt(13),t),n=255&e.charCodeAt(17);if(t>17+n){a.consoleID=e.substring(18,18+n);for(var i=0,l=0,r=18+n;r<t;)if(i=255&e.charCodeAt(r++),r+i<t){if(a.blobs[++o]={},a.blobs[o].blobID=e.substring(r,r+i),(r+=i)+4<t){if(l=(255&e.charCodeAt(r+3))<<24|(255&e.charCodeAt(r+2))<<16|(255&e.charCodeAt(r+1))<<8|255&e.charCodeAt(r),(r+=4)+l<=t)a.blobs[o].blobContent=e.substring(r,r+l),r+=l;else{cout("Blob length check failed, blob determined to be incomplete.",2);break}}else{cout("Blob was incomplete, bailing out.",2);break}}else{cout("Blob was incomplete, bailing out.",2);break}}}return a}function matchKey(e){for(var t=["right","left","up","down","a","b","select","start"],a=0;a<t.length;a++)if(t[a]==e)return a;return -1}function GameBoyEmulatorInitialized(){return"object"==typeof gameboy&&null!=gameboy}function GameBoyEmulatorPlaying(){return(2&gameboy.stopEmulator)==0}function GameBoyKeyDown(e){GameBoyEmulatorInitialized()&&GameBoyEmulatorPlaying()&&GameBoyJoyPadEvent(matchKey(e),!0)}function GameBoyJoyPadEvent(e,t){GameBoyEmulatorInitialized()&&GameBoyEmulatorPlaying()&&e>=0&&e<8&&gameboy.JoyPadEvent(e,t)}function GameBoyKeyUp(e){GameBoyEmulatorInitialized()&&GameBoyEmulatorPlaying()&&GameBoyJoyPadEvent(matchKey(e),!1)}function GameBoyGyroSignalHandler(e){if(GameBoyEmulatorInitialized()&&GameBoyEmulatorPlaying()){e.gamma||e.beta?gameboy.GyroEvent(e.gamma*Math.PI/180,e.beta*Math.PI/180):gameboy.GyroEvent(e.x,e.y);try{e.preventDefault()}catch(t){}}}function initNewCanvas(){GameBoyEmulatorInitialized()&&(gameboy.canvas.width=gameboy.canvas.clientWidth,gameboy.canvas.height=gameboy.canvas.clientHeight)}function initNewCanvasSize(){GameBoyEmulatorInitialized()&&(settings[12]?(gameboy.onscreenWidth!=gameboy.canvas.clientWidth||gameboy.onscreenHeight!=gameboy.canvas.clientHeight)&&gameboy.initLCD():(160!=gameboy.onscreenWidth||144!=gameboy.onscreenHeight)&&gameboy.initLCD())}